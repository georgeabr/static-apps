name: vim-static

on:
  push:
    paths:
      - ".github/workflows/vim-static.yml"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout your repository.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Clone the official Vim repository.
      - name: Clone Vim Source
        run: |
          git clone https://github.com/vim/vim.git

      # Step 3: Install required build dependencies.
      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses-dev autoconf zip

      # Step 4: Set a base build version based on the GitHub run number.
      - name: Set Base Build Version
        run: |
          echo "BUILD_VERSION=v${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          echo "Base build version set to ${BUILD_VERSION}"
        shell: bash

      # Step 5: Build Vim with static linking.
      - name: Build Vim (Static x64)
        run: |
          cd vim
          [ -f Makefile ] && make clean || echo "No previous build detected"
          [ ! -f configure ] && ./autogen.sh
          ./configure --with-features=huge --enable-static --disable-dynamic --prefix=$GITHUB_WORKSPACE/build
          make LDFLAGS=-static -j$(nproc)
          make install
        shell: bash

      # Step 6: Extract the patch level from the built Vim.
      # This step runs the built Vim executable (from build/bin/vim) with "--version"
      # and extracts the highest patch number from the "Included patches:" line.
      - name: Get Patch Level and Set Final Build Tag
        run: |
          PATCH_OUTPUT=$(build/bin/vim --version | grep "Included patches:")
          # Expected output format: "Included patches: 1-1234"
          PATCHLEVEL=$(echo "$PATCH_OUTPUT" | sed 's/.*-//' | awk '{print $1}')
          echo "PATCHLEVEL is $PATCHLEVEL"
          # Combine the base build version and patch level to form the final tag, e.g. "v8-p1234"
          echo "BUILD_TAG=${BUILD_VERSION}-p${PATCHLEVEL}" >> $GITHUB_ENV
          echo "Final build tag set to ${BUILD_TAG}"
        shell: bash

      # Step 7: Prepare the release files.
      # Create a temporary folder and copy in the built Vim executable and generate a release info file.
      - name: Prepare Release Files
        run: |
          mkdir release_temp
          cp build/bin/vim release_temp/vim
          echo "Release Version: ${BUILD_TAG}" > release_temp/release_info.txt
          echo "Build Date: $(date)" >> release_temp/release_info.txt
          echo "Commit: ${{ github.sha }}" >> release_temp/release_info.txt
        shell: bash

      # Step 8: Create a ZIP archive containing only the files (no nesting).
      - name: Create Release Zip
        run: |
          # -j option discards directory paths;
          # The final artifact will contain only "vim" and "release_info.txt" at its root.
          zip -j vim-${BUILD_TAG}.zip release_temp/vim release_temp/release_info.txt
        shell: bash

      # Step 9: Upload the ZIP artifact.
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: vim-static-${{ env.BUILD_TAG }}
          path: vim-${{ env.BUILD_TAG }}.zip

      # Step 10: Get the full build date.
      - name: Get Build Date
        run: |
          echo "BUILD_DATE=$(date)" >> $GITHUB_ENV
        shell: bash

      # Step 11: Create a GitHub Release and attach the ZIP asset.
      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.BUILD_TAG }}
          name: "Vim ${BUILD_TAG} Latest"
          body: |
            **Release Version:** ${BUILD_TAG}
            **Build Date:** ${BUILD_DATE}
            **Commit:** ${{ github.sha }}
          artifacts: |
            vim-${{ env.BUILD_TAG }}.zip
