name: vim-static

on:
  push:
    paths:
      - ".github/workflows/vim-static.yml"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Clone the official Vim repository.
      - name: Clone Vim Source
        run: |
          git clone https://github.com/vim/vim.git

      # Step 3: Install required build dependencies.
      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses-dev autoconf zip

      # Step 4: Build Vim with static linking.
      - name: Build Vim (Static x86-64)
        run: |
          cd vim
          [ -f Makefile ] && make clean || echo "No previous build detected"
          [ ! -f configure ] && ./autogen.sh
          ./configure --with-features=huge --enable-static --disable-dynamic --prefix=$GITHUB_WORKSPACE/build
          make LDFLAGS=-static -j$(nproc)
          make install
        shell: bash

      # Step 5: Extract version information and set FINAL_VERSION.
      - name: Get Version Information and Set Final Version
        run: |
          # Get the first line of "vim --version" (e.g., "VIM - Vi IMproved 8.2 (2019 Dec 12, compiled ...)")
          VIM_VERSION_OUTPUT=$(build/bin/vim --version | head -1)
          echo "Vim version line: $VIM_VERSION_OUTPUT"
          # Extract the major.minor version (e.g., "8.2")
          VIM_MAJOR_MINOR=$(echo "$VIM_VERSION_OUTPUT" | sed -E 's/[^0-9]*([0-9]+\.[0-9]+).*/\1/')
          echo "VIM_MAJOR_MINOR is ${VIM_MAJOR_MINOR}"
          # Extract the patch level from the "Included patches:" line.
          PATCH_OUTPUT=$(build/bin/vim --version | grep "Included patches:")
          PATCHLEVEL=$(echo "$PATCH_OUTPUT" | sed 's/.*-//' | awk '{print $1}')
          echo "PATCHLEVEL is ${PATCHLEVEL}"
          # Combine to form the final version string (e.g., "8.2.1234").
          FINAL_VERSION="${VIM_MAJOR_MINOR}.${PATCHLEVEL}"
          echo "FINAL_VERSION is ${FINAL_VERSION}"
          echo "FINAL_VERSION=${FINAL_VERSION}" >> $GITHUB_ENV
        shell: bash

      # Step 6: Prepare the release files.
      - name: Prepare Release Files
        run: |
          mkdir release_temp
          cp build/bin/vim release_temp/vim
          echo "Release Version: ${FINAL_VERSION}" > release_temp/release_info.txt
          echo "Build Date: $(date)" >> release_temp/release_info.txt
          echo "Commit: ${{ github.sha }}" >> release_temp/release_info.txt
        shell: bash

      # Step 7: Create a ZIP archive containing only the files (without nested folder).
      - name: Create Release Zip
        run: |
          # The -j option discards directory paths so that the ZIP archive contains only files.
          zip -j vim-${FINAL_VERSION}.zip release_temp/vim release_temp/release_info.txt
        shell: bash

      # (Optional) Step: List workspace files to verify the ZIP is present.
      - name: List Workspace Files
        run: ls -l
        shell: bash

      # Step 8: Upload the custom ZIP as an artifact.
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: vim-static-${{ env.FINAL_VERSION }}
          path: vim-${{ env.FINAL_VERSION }}.zip

      # Step 9: Get Build Date for release info.
      - name: Get Build Date
        run: |
          echo "BUILD_DATE=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        shell: bash

      # Step 10: Create a GitHub Release and attach the custom ZIP asset.
      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.FINAL_VERSION }}
          name: "Vim ${{ env.FINAL_VERSION }}"
          body: |
            Statically linked x86-64 executable
            **Release Version:** ${{ env.FINAL_VERSION }}
            **Build Date:** ${{ env.BUILD_DATE }}
            **Commit:** ${{ github.sha }}
          artifacts: |
            vim-${{ env.FINAL_VERSION }}.zip
