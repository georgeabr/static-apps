name: vim-static

on:
  push:
    paths:
      - ".github/workflows/vim-static.yml"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout your repository.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set the build version using the GitHub run number.
      - name: Set Build Version
        run: |
          echo "BUILD_VERSION=v${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          echo "Build version set to ${BUILD_VERSION}"
        shell: bash

      # Step 3: Create a fake build file.
      - name: Create Fake Build File
        run: |
          echo "This is a fake build artifact for ${BUILD_VERSION}" > fake_build.txt
        shell: bash

      # Step 4: Tag your repository with the build version using your PAT.
      - name: Tag Repository with Build Version
        env:
          MY_PAT: ${{ secrets.MY_PAT }}
        run: |
          # Set Git's user configuration.
          git config --global user.name "georgeabr"
          git config --global user.email "georgeabr@users.noreply.github.com"
          echo "Tagging commit with ${BUILD_VERSION}"
          git tag ${BUILD_VERSION}
          # Remove the existing remote origin.
          git remote remove origin
          # Add remote with explicit credentials.
          git remote add origin https://georgeabr:${MY_PAT}@github.com/georgeabr/static-apps.git
          # Display the remote URL for debugging.
          git remote -v
          # Push the new tag.
          git push origin ${BUILD_VERSION}
        shell: bash

      # Step 5: Package the fake build file into a ZIP artifact.
      - name: Create Artifact Zip
        run: |
          zip -r fake_build_${BUILD_VERSION}.zip fake_build.txt
        shell: bash

      # Step 6: Upload the ZIP artifact.
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fake-build-artifact-${{ env.BUILD_VERSION }}
          path: fake_build_${{ env.BUILD_VERSION }}.zip
